openapi: 3.0.0
info:
  version: "1.0.0"
  title: Corpora Data Portal API
  description: >
    This is the API for the Corpora Data Portal
servers:
  - description: production
    url: https://api.corpora.czi-single-cell.science
paths:
  /v1/submissions:
    get:
      summary: List submissions
      tags:
        - submissions
      description: >-
        This lists all submissions and their UUIDs that currently exist in corpora. If a parameter is specified as a filter, then only projects that meet the status criteria will be outputted.

        If user_uuid is provided, submissions from that user are returned. If no user uuid is specified the id of the authenticated user is used.
      parameters:
        - name: status
          description: The status of the submissions to list.
          in: query
          schema:
            type: string
            enum: [open, closed]
        - $ref: '#/components/parameters/user_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      summary: Create a new submission
      tags:
        - submissions
      description: >-
        opens a new submission and an empty project for editing. Executing this call will create a new entry in both the Submission and Project tables with empty fields and creates a new folder with the given project uuid in the data portal S3 bucket. If successful, a message will be returned with the project’s UUID.
      responses:
        '201':
          description: A new submissions has been created.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/submissions/{submission_uuid}:
    get:
      summary: Get project submission by uuid
      tags:
        - submissions
      description: >-
        This call will return all available metadata information about a project’s submission, including datasets that are attached to the project.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: Submission not found
    delete:
      summary: Delete a submissions
      tags:
        - submissions
      description: >-
        this call deletes the submission related to the submission UUID. This does not delete a project if it has been previously publicly published.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/submissions/{submission_uuid}/file/{filename}:
    put:
      summary: Add file to submission
      tags:
        - submissions
      description: >-
        this call adds a file to the project. If a file already exists, it will not replace it and instead return that a file already exists. A quick validation will be performed to ensure that if the file is a data file, then the extension is one of the accepted types (i.e. .loom, .h5ad, or Seurat).
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/filetype'
      responses:
        '201':
          description: File added to submission.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    delete:
      summary: Delete project file'
      tags:
        - submissions
      description: >-
        This call removes a file from the project if the file and project exists. If either don't exists, then a warning will be error will be returned.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
        - $ref: '#/components/parameters/filename'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/submissions/{submission_uuid}/validate:
    post:
      tags:
        - submissions
      summary: Validate the Project
      description: >-
        Validates the project and outputs the result, specifying all errors.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/submissions/{submission_uuid}/save:
    post:
      tags:
        - submissions
      summary: Save the Project
      description: >-
        If needed, extracts the project-level metadata from the datasets or uses the given project-level metadata imputed via the body parameter and saves it.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                A schema that has fields for all available project-level metadata.
              type: object
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/submissions/{submission_uuid}/publish:
    post:
      tags:
        - submissions
      summary: Publish the Project
      description: >-
        A schema that contains a field dictating the visibility of the deployments that will either make the project visible on the public sites or only viewable through obfuscated URLs.
      parameters:
        - $ref: '#/components/parameters/submission_uuid'
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                a schema that has fields for all available project-level metadata.
              type: object
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v1/projects:
    get:
      tags:
        - projects
      summary: List Projects
      description: >-
        This lists all projects and their UUIDs that currently exist in the data portal. If a parameter is specified as a filter, then only projects that meet the status criteria will be outputted.
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [foo,bar]
        - $ref: '#/components/parameters/user_uuid'
        - name: fromDate
          in: query
          schema:
            type: integer
          description: The date after which projects should have been created.
        - name: toDate
          in: query
          description: The date before which projects should have been created.
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
  /v1/projects/{project_uuid}:
    get:
      tags:
        - projects
      summary: Get Project
      description: >-
        This will return all datasets and associated attributes, including processing pipeline statuses of the project.
      parameters:
        - $ref: '#/components/parameters/project_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - projects
      summary: Delete Project
      description: >-
        This call deletes an entire project from Corpora, including any generated artifacts/assets and deployments. If no such project exists, then a warning will be outputted.
      parameters:
        - $ref: '#/components/parameters/project_uuid'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
components:
  parameters:
    submission_uuid:
      name: submission_uuid
      in: path
      required: true
      schema:
        type: string
    project_uuid:
      description: >-
        The project UUID of the submission that is being validated.
      name: project_uuid
      in: path
      required: true
      schema:
        type: string
    filename:
      name: filename
      description: The name of a file to add, remove, or download.
      in: path
      required: true
      schema:
        type: string
    filetype:
      name: filetype
      in: query
      required: true
      schema:
        type: string
        enum: [legal, data]
    user_uuid:
      name: userid
      description: an ID that represents the user.
      in: query
      schema:
        type: string
  responses:
    200:
      description: OK.
    201:
      description: Created.
    400:
      description: Invalid parameter.
    401:
      description: Failed to authenticate.
    403:
      description: Unauthorized.
    404:
      description: Resource not found.
    409:
      description: File conflict.
  securitySchemes:
    implicit:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/oauth/auth'
          scopes:
            write: allows modifying resources
            read: allows reading resources
