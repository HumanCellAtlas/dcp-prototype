"""update_for_collections

Revision ID: f6c4f66e8db6
Revises: 9023d0bf61ab
Create Date: 2020-10-27 16:14:31.084060

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f6c4f66e8db6"
down_revision = "9023d0bf61ab"
branch_labels = None
depends_on = None

# Enum 'type' for PostgreSQL
enum_projectlink = 'projectlink'
# Set temporary enum 'type' for PostgreSQL
tmp_enum_projectlink = 'tmp_' + enum_projectlink

# Options for Enum
old_options = ("RAW_DATA", "PROTOCOL", "SUMMARY", "OTHER")
new_options = sorted(["DOI", "RAW_DATA", "PROTOCOL", "LAB_WEBSITE", "OTHER"])

# Create enum fields
old_type = sa.Enum(*old_options, name=enum_projectlink)
new_type = sa.Enum(*new_options, name=enum_projectlink)

def upgrade():
    # For more information about the changes executed here, please visit the design document and the approved
    # modifications to the database UML:
    # https://github.com/chanzuckerberg/single-cell/blob/main/rfcs/0001-data-portal-architecture/text.md

    def _add_visibility(table):
        prefix1 = "" if table == "project" else "collection_"
        prefix2 = "" if table == "project" else "project_"
        op.add_column(
            table, sa.Column(f"{prefix1}visibility", sa.Enum("PUBLIC", "PRIVATE", name="collectionvisibility"), nullable=True)
        )
        op.execute(f"UPDATE {table} SET {prefix1}visibility = 'PUBLIC' WHERE {prefix2}status = 'LIVE'")
        op.execute(f"UPDATE {table} SET {prefix1}visibility = 'PRIVATE' WHERE {prefix2}status = 'EDIT'")
        op.alter_column(table, f"{prefix1}visibility", nullable=False)
        if table != "project":
            op.alter_column(table, f"{prefix2}id", nullable=False, new_column_name=f"{prefix1}id")
        op.drop_column(table, f"{prefix2}status")

    def _add_nullable_false(table, column, type, default):
        op.add_column(table, sa.Column(column, type, nullable=True))
        op.execute(f"UPDATE {table} SET {column} = {default}")
        op.alter_column(table, column, nullable=False)

    # Create Visibility Enum
    visibility_enum = postgresql.ENUM("PUBLIC", "PRIVATE", name="collectionvisibility")
    visibility_enum.create(op.get_bind())

    # Remove (id, status) Primary and Foreign Key Constraint
    op.execute("ALTER TABLE project DROP CONSTRAINT project_pkey CASCADE")

    # Update Project Table
    _add_visibility("project")
    op.create_primary_key("project_pkey", "project", ["id", "visibility"])
    op.add_column('project', sa.Column('contact_email', sa.String(), nullable=True))
    op.add_column('project', sa.Column('contact_name', sa.String(), nullable=True))
    _add_nullable_false("project", 'data_submission_policy_version', sa.String(), default="0")
    op.add_column('project', sa.Column('obfuscated_uuid', sa.String(), nullable=True))
    op.drop_constraint("project_owner_fkey", "project", type_="foreignkey")
    op.drop_column('project', 'processing_state')
    op.drop_column('project', 's3_bucket')
    op.drop_column('project', 'needs_attestation')
    op.drop_column('project', 'tc_uri')
    op.drop_column('project', 'validation_state')

    # Update Project Link Table
    _add_visibility("project_link")
    op.create_foreign_key(
        None, "project_link", "project", ["collection_id", "collection_visibility"], ["id", "visibility"]
    )

    # Update Dataset Table
    _add_visibility("dataset")
    op.create_foreign_key(None, "dataset", "project", ["collection_id", "collection_visibility"], ["id", "visibility"])
    op.add_column('dataset', sa.Column('cell_count', sa.Integer(), nullable=True))
    op.add_column('dataset', sa.Column('is_valid', sa.Boolean(), nullable=True))
    op.drop_column('dataset', 'publication_doi')
    op.drop_column('dataset', 'source_data_location')
    op.drop_column('dataset', 'preprint_doi')

    # Update Deployment_Directory Table
    op.drop_column("deployment_directory", "environment")

    # Remove Tables
    op.drop_table('dataset_contributor')
    op.drop_table('contributor')
    op.drop_table('user')

    # Drop Project Status Enum
    sa.Enum(name="projectstatus").drop(op.get_bind(), checkfirst=False)

    # Update Link Type Enum
    # Rename current enum type to tmp_
    op.execute("DELETE FROM project_link WHERE project_link.link_type = 'SUMMARY';")
    op.execute('ALTER TYPE ' + enum_projectlink + ' RENAME TO ' + tmp_enum_projectlink)
    # Create new enum type in db
    new_type.create(op.get_bind())
    # Update column to use new enum type
    op.execute('ALTER TABLE project_link ALTER COLUMN link_type TYPE ' + enum_projectlink + ' USING link_type::text::' + enum_projectlink)
    # Drop old enum type
    op.execute('DROP TYPE ' + tmp_enum_projectlink)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic###

    # Create Status Enum
    status_enum = postgresql.ENUM("LIVE", "EDIT", name="projectstatus")
    status_enum.create(op.get_bind())

    # Create User Table
    op.create_table(
        "user",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
    )
    op.execute("""INSERT INTO public.user (id) SELECT DISTINCT owner FROM project""")
    op.create_foreign_key("project_owner_fkey", "project", "user", ["owner"], ["id"])

    # Remove (id, status) Primary and Foreign Key Constraint
    op.execute("ALTER TABLE project DROP CONSTRAINT project_pkey CASCADE")

    # Update Project Table
    op.add_column(
        "project",
        sa.Column(
            "validation_state",
            postgresql.ENUM("NOT_VALIDATED", "VALID", "INVALID", name="validationstate"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "project",
        sa.Column("status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"),
    )
    op.add_column("project", sa.Column("s3_bucket", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "project",
        sa.Column(
            "processing_state",
            postgresql.ENUM("NA", "IN_VALIDATION", "IN_ARTIFACT_CREATION", "IN_DEPLOYMENT", name="processingstate"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.execute("UPDATE project SET status = 'LIVE' WHERE visibility = 'PUBLIC'")
    op.execute("UPDATE project SET status = 'EDIT' WHERE visibility = 'PRIVATE'")
    op.create_primary_key("project_pkey", "project", ["id", "status"])
    op.drop_column("project", "visibility")
    op.drop_column("project", "obfuscated_uuid")

    # Update Project Link Table
    op.add_column(
        "project_link",
        sa.Column(
            "project_status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"
        ),
    )
    op.execute("UPDATE project_link SET project_status = 'LIVE' WHERE collection_visibility = 'PUBLIC'")
    op.execute("UPDATE project_link SET project_status = 'EDIT' WHERE collection_visibility = 'PRIVATE'")
    op.alter_column("project_link", "collection_id", nullable=False, new_column_name="project_id")
    op.create_foreign_key(
        "project_link_project_id_fkey", "project_link", "project", ["project_id", "project_status"], ["id", "status"]
    )
    op.drop_column("project_link", "collection_visibility")

    # Update Columns in Project Links table

    # Update Deployment Directory Table
    op.add_column("deployment_directory", sa.Column("environment", sa.VARCHAR(), autoincrement=False, nullable=True))

    # Update Dataset Table
    op.add_column("dataset", sa.Column("source_data_location", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "dataset",
        sa.Column(
            "project_status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"
        ),
    )
    op.alter_column("dataset", "collection_id", nullable=False, new_column_name="project_id")
    op.execute("UPDATE dataset SET project_status = 'LIVE' WHERE collection_visibility = 'PUBLIC'")
    op.execute("UPDATE dataset SET project_status = 'EDIT' WHERE collection_visibility = 'PRIVATE'")
    op.create_foreign_key("fk_project", "dataset", "project", ["project_id", "project_status"], ["id", "status"])
    op.drop_column("dataset", "collection_visibility")
    op.drop_column("dataset", "is_valid")

    # Drop collection visibility Enum
    sa.Enum(name="collectionvisibility").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
