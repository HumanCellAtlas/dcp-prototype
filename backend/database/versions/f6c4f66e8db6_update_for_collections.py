"""update_for_collections

Revision ID: f6c4f66e8db6
Revises: 9023d0bf61ab
Create Date: 2020-10-27 16:14:31.084060

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f6c4f66e8db6"
down_revision = "9023d0bf61ab"
branch_labels = None
depends_on = None


def upgrade():
    # For more information about the changes executed here, please visit the design document and the approved
    # modifications to the database UML:
    # https://github.com/chanzuckerberg/single-cell/blob/main/rfcs/0001-data-portal-architecture/text.md

    # Create Visibility Enum
    visibility_enum = postgresql.ENUM("PUBLIC", "PRIVATE", name="collectionvisibility")
    visibility_enum.create(op.get_bind())

    # Add visibility column
    op.add_column(
        "project", sa.Column("visibility", sa.Enum("PUBLIC", "PRIVATE", name="collectionvisibility"), default="PRIVATE")
    )
    op.add_column(
        "dataset",
        sa.Column("project_visibility", sa.Enum("PUBLIC", "PRIVATE", name="collectionvisibility"), default="PRIVATE"),
    )
    op.add_column(
        "project_link",
        sa.Column("project_visibility", sa.Enum("PUBLIC", "PRIVATE", name="collectionvisibility"), default="PRIVATE"),
    )

    # Map Status to Visibility Column
    op.execute("UPDATE project SET visibility = 'PUBLIC' WHERE status = 'LIVE'")
    op.execute("UPDATE project SET visibility = 'PRIVATE' WHERE status = 'EDIT'")
    op.execute("UPDATE dataset SET project_visibility = 'PUBLIC' WHERE project_status = 'LIVE'")
    op.execute("UPDATE dataset SET project_visibility = 'PRIVATE' WHERE project_status = 'EDIT'")
    op.execute("UPDATE project_link SET project_visibility = 'PUBLIC' WHERE project_status = 'LIVE'")
    op.execute("UPDATE project_link SET project_visibility = 'PRIVATE' WHERE project_status = 'EDIT'")

    # Remove (id, status) Primary and Foreign Key Constraint
    op.execute("ALTER TABLE project DROP CONSTRAINT project_pkey CASCADE")

    # Add (id, visibility) Primary and Foreign Key Constraint
    op.create_primary_key("project_pkey", "project", ["id", "visibility"])
    op.create_foreign_key(None, "project_link", "project", ["project_id", "project_visibility"], ["id", "visibility"])
    op.create_foreign_key(None, "dataset", "project", ["project_id", "project_visibility"], ["id", "visibility"])

    # Drop Status Columns
    op.drop_column("dataset", "project_status")
    op.drop_column("project_link", "project_status")
    op.drop_column("project", "status")

    # Update Columns in Dataset Table
    op.add_column("dataset", sa.Column("is_valid", sa.Boolean(), nullable=True))
    op.drop_column("dataset", "source_data_location")

    # Remove Columns from deployment_directory
    op.drop_column("deployment_directory", "environment")

    # Update Columns in Project Table
    op.add_column("project", sa.Column("obfuscated_uuid", sa.String(), nullable=True))
    op.drop_constraint("project_owner_fkey", "project", type_="foreignkey")
    op.drop_column("project", "processing_state")
    op.drop_column("project", "s3_bucket")
    op.drop_column("project", "validation_state")

    # Remove User Table
    op.drop_table("user")

    # Drop Project Status Enum
    sa.Enum(name="projectstatus").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic###

    # Create Status Enum
    status_enum = postgresql.ENUM("LIVE", "EDIT", name="projectstatus")
    status_enum.create(op.get_bind())

    # Create User Table
    op.create_table(
        "user",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), server_default=sa.text("now()"), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
    )
    op.execute("""INSERT INTO public.user (id) SELECT DISTINCT owner FROM project""")
    op.create_foreign_key("project_owner_fkey", "project", "user", ["owner"], ["id"])

    # Remove (id, status) Primary and Foreign Key Constraint
    op.execute("ALTER TABLE project DROP CONSTRAINT project_pkey CASCADE")

    # Update Project Table
    op.add_column(
        "project",
        sa.Column(
            "validation_state",
            postgresql.ENUM("NOT_VALIDATED", "VALID", "INVALID", name="validationstate"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "project",
        sa.Column("status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"),
    )
    op.add_column("project", sa.Column("s3_bucket", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "project",
        sa.Column(
            "processing_state",
            postgresql.ENUM("NA", "IN_VALIDATION", "IN_ARTIFACT_CREATION", "IN_DEPLOYMENT", name="processingstate"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.execute("UPDATE project SET status = 'LIVE' WHERE visibility = 'PUBLIC'")
    op.execute("UPDATE project SET status = 'EDIT' WHERE visibility = 'PRIVATE'")
    op.create_primary_key("project_pkey", "project", ["id", "status"])
    op.drop_column("project", "visibility")
    op.drop_column("project", "obfuscated_uuid")

    # Update Project Link Table
    op.add_column(
        "project_link",
        sa.Column(
            "project_status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"
        ),
    )
    op.execute("UPDATE project_link SET project_status = 'LIVE' WHERE project_visibility = 'PUBLIC'")
    op.execute("UPDATE project_link SET project_status = 'EDIT' WHERE project_visibility = 'PRIVATE'")
    op.create_foreign_key(
        "project_link_project_id_fkey", "project_link", "project", ["project_id", "project_status"], ["id", "status"]
    )
    op.drop_column("project_link", "project_visibility")

    # Update Deployment Directory Table
    op.add_column("deployment_directory", sa.Column("environment", sa.VARCHAR(), autoincrement=False, nullable=True))

    # Update Dataset Table
    op.add_column("dataset", sa.Column("source_data_location", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "dataset",
        sa.Column(
            "project_status", postgresql.ENUM("LIVE", "EDIT", name="projectstatus"), autoincrement=False, default="EDIT"
        ),
    )
    op.execute("UPDATE dataset SET project_status = 'LIVE' WHERE project_visibility = 'PUBLIC'")
    op.execute("UPDATE dataset SET project_status = 'EDIT' WHERE project_visibility = 'PRIVATE'")
    op.create_foreign_key("fk_project", "dataset", "project", ["project_id", "project_status"], ["id", "status"])
    op.drop_column("dataset", "project_visibility")
    op.drop_column("dataset", "is_valid")

    # Drop collection visibility Enum
    sa.Enum(name="collectionvisibility").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
