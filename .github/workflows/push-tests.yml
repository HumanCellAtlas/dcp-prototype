name: Push Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches: "*"

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  DEPLOYMENT_STAGE: test
  # Force using BuildKit instead of normal Docker, required so that metadata
  # is written/read to allow us to use layers of previous builds as cache.
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_REPO: ${{ secrets.ECR_REPO }}/

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Lint Python
        run: |
          docker-compose run --no-deps --rm backend make -C /corpora-data-portal lint
      - name: Lint frontend
        run: |
          npm run prettier-check
          npm run lint
          docker-compose run --no-deps --rm frontend make lint
#       - uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ job.status }}
#           fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # required
          
#         if: failure() # Pick up events even if the job fails or is canceled
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL:  test-webhooks
          SLACK_COLOR: danger
#       - name: slack notify
#         if: failure()
#         env:
#           GITHUB_WORKFLOW_URL: https://github.com/${GITHUB_REPOSITORY }/actions/runs/${GITHUB_RUN_ID}
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#         run: |
#           curl -X POST -H 'Content-type: application/json' --data "{'text':'$GITHUB_WORKFLOW failure in $GITHUB_REPOSITORY:$GITHUB_HEAD_REF, https://github.com/$GITHUB_REPOSITORY /actions/runs/$GITHUB_RUN_ID'}" $SLACK_WEBHOOK

  smoke-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Run tests in docker-compose
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          make local-sync
          make local-smoke-test
      - name: Push images
        if: github.ref == 'refs/heads/main'
        run: |
          pip install -r .happy/requirements.txt
          pip install -r .happy/requirements2.txt
          scripts/happy --profile="" push --extra-tag sha-${GITHUB_SHA:0:8} --extra-tag build-${GITHUB_RUN_NUMBER} frontend backend

  build-extra-images:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker build, push, and tag
        shell: bash
        run: |
          pip install -r .happy/requirements.txt
          pip install -r .happy/requirements2.txt
          scripts/happy --profile="" push --extra-tag sha-${GITHUB_SHA:0:8} --extra-tag build-${GITHUB_RUN_NUMBER} upload_failures processing

  unit-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Run tests in docker-compose
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          make local-sync
          make local-unit-test

  push-image:
    needs:
      - unit-test
      - smoke-test
      - lint
      - build-extra-images
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker build, push, and tag
        shell: bash
        run: |
          pip install -r .happy/requirements.txt
          pip install -r .happy/requirements2.txt
          scripts/happy --profile="" addtags --source-tag sha-${GITHUB_SHA:0:8} --dest-tag branch-$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\+\/]/-/g')

  push-upload-image:
    needs:
      - unit-test
      - smoke-test
      - lint
      - build-extra-images
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      # TODO - eventually we'll need to log into multiple ECR's
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker pull, tag, and push
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
          UPLOAD_ECR: ${{ secrets.ECR_REPO }}
        shell: bash
        run: |
          docker pull ${ECR_REPO}/corpora-upload:sha-${GITHUB_SHA:0:8}
          for tag in active branch-$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\+\/]/-/g') sha-${GITHUB_SHA:0:8}; do
              docker tag ${ECR_REPO}/corpora-upload:sha-${GITHUB_SHA:0:8} ${UPLOAD_ECR}/corpora-upload-dev:${tag}
              docker push ${UPLOAD_ECR}/corpora-upload-dev:${tag}
          done
