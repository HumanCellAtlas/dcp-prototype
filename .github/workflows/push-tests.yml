name: Push Tests

on:
  push:
    branches:
      - happy/cicd
      - mbarrien/happy-cicd
  #     - main
  # pull_request:
  #   branches: "*"

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  DEPLOYMENT_STAGE: test
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.7
  #     - name: Node cache
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
  #     - name: Install dependencies
  #       run: |
  #         pip install flake8-black
  #         cd frontend
  #         cp src/configs/local.js src/configs/configs.js
  #         npm install
  #     - name: Lint with flake8-black
  #       run: |
  #         make lint
  #     - name: Lint src with eslint
  #       working-directory: ./frontend
  #       run: |
  #         npm run prettier-check
  #         npm run lint

  # smoke-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         role-duration-seconds: 900
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.7
  #     - name: Python cache
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #     - name: Node cache
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         brew install moreutils
  #         make package -C ./backend/chalice/api_server

  #         cd frontend
  #         cp src/configs/local.js src/configs/configs.js
  #         npm install
  #     - name: smoke test prod build with local BE server
  #       run: |
  #         make smoke-test-with-local-backend-ci

  unit-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Prime the docker image cache
        run: |
          docker-compose pull
          docker pull ${{ secrets.ECR_REPO }}/corpora-frontend:jgadling-0127-125050
          docker tag ${{ secrets.ECR_REPO }}/corpora-frontend:jgadling-0127-125050 corpora-frontend:latest
          docker pull ${{ secrets.ECR_REPO }}/corpora-backend:jgadling-0127-125050
          docker tag ${{ secrets.ECR_REPO }}/corpora-backend:jgadling-0127-125050 corpora-backend:latest
          docker pull ${{ secrets.ECR_REPO }}/corpora-upload:jgadling-0127-125050
          docker tag ${{ secrets.ECR_REPO }}/corpora-upload:jgadling-0127-125050 corpora-processing:latest
          docker pull ${{ secrets.ECR_REPO }}/corpora-upload-failures:jgadling-0127-125050
          docker tag ${{ secrets.ECR_REPO }}/corpora-upload-failures:jgadling-0127-125050 corpora-upload-failures:latest
          docker image list
      - name: Run tests in docker-compose
        run: |
          make local-sync
          make local-unit-test
          sudo chown $(id -u):$(id -g) .coverage
          bash <(curl -s https://codecov.io/bash) -cF backend,python,unitTest
